     1                                  ;		AUTHOR	:	VISHAL ANAND
     2                                  ;		ROLL NO	:	B16040
     3                                  ;		CO ASSIGNMENT - 6
     4                                  ;----------------------------------------
     5                                  
     6                                  %include "io.mac"
     7                              <1> extern   proc_nwln, proc_PutCh, proc_PutStr
     8                              <1> extern   proc_GetStr, proc_GetCh
     9                              <1> extern   proc_PutInt, proc_GetInt
    10                              <1> extern   proc_PutLInt, proc_GetLInt
    11                              <1> 
    12                              <1> ;;-------------------------------------------------------------------
    13                              <1> %macro  .STARTUP  0
    14                              <1> ;group dgroup .data .bss
    15                              <1>         global   _start
    16                              <1> _start:
    17                              <1> %endmacro
    18                              <1> ;;-------------------------------------------------------------------
    19                              <1> 
    20                              <1> 
    21                              <1> ;;-------------------------------------------------------------------
    22                              <1> %macro  .EXIT  0
    23                              <1>         mov    EAX,1
    24                              <1>         xor    EBX,EBX
    25                              <1>         int    0x80
    26                              <1> %endmacro
    27                              <1> ;;-------------------------------------------------------------------
    28                              <1> 
    29                              <1> 
    30                              <1> ;;-------------------------------------------------------------------
    31                              <1> %macro  .DATA 0
    32                              <1>         segment .data
    33                              <1> %endmacro
    34                              <1> ;;-------------------------------------------------------------------
    35                              <1> 
    36                              <1> ;;-------------------------------------------------------------------
    37                              <1> %macro  .UDATA 0
    38                              <1>         segment .bss
    39                              <1> %endmacro
    40                              <1> ;;-------------------------------------------------------------------
    41                              <1> 
    42                              <1> ;;-------------------------------------------------------------------
    43                              <1> %macro  .CODE 0
    44                              <1>         segment .data
    45                              <1>         segment .bss
    46                              <1>         segment .text
    47                              <1> %endmacro
    48                              <1> ;;-------------------------------------------------------------------
    49                              <1> 
    50                              <1> 
    51                              <1> ;;-------------------------------------------------------------------
    52                              <1> %macro  nwln  0 
    53                              <1>         call    proc_nwln
    54                              <1> %endmacro
    55                              <1> ;;-------------------------------------------------------------------
    56                              <1> 
    57                              <1> 
    58                              <1> ;;-------------------------------------------------------------------
    59                              <1> %macro  PutCh  1 
    60                              <1>         push    AX
    61                              <1>         mov     AL,%1
    62                              <1>         call    proc_PutCh
    63                              <1>         pop     AX
    64                              <1> %endmacro
    65                              <1> ;;-------------------------------------------------------------------
    66                              <1> 
    67                              <1> 
    68                              <1> ;;-------------------------------------------------------------------
    69                              <1> %macro  PutStr  1 
    70                              <1>         push    ECX
    71                              <1>         mov     ECX,%1
    72                              <1>         call    proc_PutStr
    73                              <1>         pop     ECX
    74                              <1> %endmacro
    75                              <1> ;;-------------------------------------------------------------------
    76                              <1> 
    77                              <1> 
    78                              <1> ;;-------------------------------------------------------------------
    79                              <1> %macro  GetStr  1-2 81
    80                              <1>         push    ESI
    81                              <1>         push    EDI
    82                              <1>         mov     EDI,%1
    83                              <1>         mov     ESI,%2
    84                              <1>         call    proc_GetStr
    85                              <1>         pop     EDI
    86                              <1>         pop     ESI
    87                              <1> %endmacro
    88                              <1> ;;-------------------------------------------------------------------
    89                              <1> 
    90                              <1> 
    91                              <1> ;;-------------------------------------------------------------------
    92                              <1> %macro  GetCh   1
    93                              <1>         push    SI
    94                              <1>         xor     SI,SI
    95                              <1> %ifidni %1,AL
    96                              <1>         ;inc     SI
    97                              <1>         call    proc_GetCh
    98                              <1> %elifidni %1,AH
    99                              <1>         mov     SI,1
   100                              <1>         call    proc_GetCh
   101                              <1> %else
   102                              <1>         push    AX
   103                              <1>         call    proc_GetCh
   104                              <1>         mov     %1,AL
   105                              <1>         pop     AX
   106                              <1> %endif
   107                              <1>         pop     SI
   108                              <1> %endmacro
   109                              <1> ;;-------------------------------------------------------------------
   110                              <1> 
   111                              <1> 
   112                              <1> ;;-------------------------------------------------------------------
   113                              <1> %macro  PutInt  1
   114                              <1>         push    AX
   115                              <1>         mov     AX,%1
   116                              <1>         call    proc_PutInt
   117                              <1>         pop     AX
   118                              <1> %endmacro
   119                              <1> ;;-------------------------------------------------------------------
   120                              <1> 
   121                              <1> 
   122                              <1> ;;-------------------------------------------------------------------
   123                              <1> %macro  GetInt  1
   124                              <1> %ifnidni %1,AX
   125                              <1>         push    AX
   126                              <1>         call    proc_GetInt
   127                              <1>         mov     %1,AX
   128                              <1> 	  pop     AX
   129                              <1> %else 
   130                              <1>         call  proc_GetInt
   131                              <1> %endif
   132                              <1> %endmacro
   133                              <1> ;;-------------------------------------------------------------------
   134                              <1> 
   135                              <1> ;;-------------------------------------------------------------------
   136                              <1> %macro  PutLInt  1
   137                              <1>         push    EAX
   138                              <1>         mov     EAX,%1
   139                              <1>         call    proc_PutLInt
   140                              <1>         pop     EAX
   141                              <1> %endmacro
   142                              <1> ;;-------------------------------------------------------------------
   143                              <1> 
   144                              <1> ;;-------------------------------------------------------------------
   145                              <1> %macro  GetLInt  1
   146                              <1> %ifnidni %1,EAX
   147                              <1>         push    EAX
   148                              <1>         call    proc_GetLInt
   149                              <1>         mov     %1,EAX
   150                              <1> 	  pop     EAX
   151                              <1> %else 
   152                              <1>         call  proc_GetLInt
   153                              <1> %endif
   154                              <1> %endmacro
   155                              <1> ;;-------------------------------------------------------------------
   156                              <1> 
   157                                  
   158                                  .DATA
   159                              <1>  segment .data
   160 00000000 456E74657220746865-     	askN db "Enter the number of rows (N): ",0
   161 00000009 206E756D626572206F-
   162 00000012 6620726F777320284E-
   163 0000001B 293A2000           
   164 0000001F 456E74657220746865-     	askM db "Enter the number of cols (M): ",0
   165 00000028 206E756D626572206F-
   166 00000031 6620636F6C7320284D-
   167 0000003A 293A2000           
   168 0000003E 456E746572206D6174-     	askMatrix db "Enter matrix:",0
   169 00000047 7269783A00         
   170 0000004C 2000                    	space db " ",0
   171                                  
   172                                  .UDATA
   173                              <1>  segment .bss
   174 00000000 <res 00000002>          	N resw 1
   175 00000002 <res 00000002>          	M resw 1
   176 00000004 <res 00000002>          	i resw 1
   177 00000006 <res 00000002>          	j resw 1
   178 00000008 <res 00000004>          	offset resd 1
   179 0000000C <res 00000004>          	val1 resd 1
   180 00000010 <res 00000004>          	val2 resd 1
   181 00000014 <res 00000004>          	val3 resd 1
   182 00000018 <res 00000190>          	arr1 resd 100
   183 000001A8 <res 00000190>          	arr2 resd 100
   184 00000338 <res 00000190>          	arr3 resd 100
   185                                  
   186                                  .CODE
   187                              <1>  segment .data
   188                              <1>  segment .bss
   189                              <1>  segment .text
   190                                  	.STARTUP
   191                              <1> 
   192                              <1>  global _start
   193                              <1> _start:
   194                                  
   195                                  	PutStr askN
   196 00000000 51                  <1>  push ECX
   197 00000001 B9[00000000]        <1>  mov ECX,%1
   198 00000006 E8(00000000)        <1>  call proc_PutStr
   199 0000000B 59                  <1>  pop ECX
   200                                  	GetInt [N]
   201                              <1> %ifnidni %1,AX
   202 0000000C 6650                <1>  push AX
   203 0000000E E8(00000000)        <1>  call proc_GetInt
   204 00000013 66A3[00000000]      <1>  mov %1,AX
   205 00000019 6658                <1>  pop AX
   206                              <1> %else
   207                              <1>  call proc_GetInt
   208                              <1> %endif
   209                                  	PutStr askM
   210 0000001B 51                  <1>  push ECX
   211 0000001C B9[1F000000]        <1>  mov ECX,%1
   212 00000021 E8(00000000)        <1>  call proc_PutStr
   213 00000026 59                  <1>  pop ECX
   214                                  	GetInt [M]
   215                              <1> %ifnidni %1,AX
   216 00000027 6650                <1>  push AX
   217 00000029 E8(00000000)        <1>  call proc_GetInt
   218 0000002E 66A3[02000000]      <1>  mov %1,AX
   219 00000034 6658                <1>  pop AX
   220                              <1> %else
   221                              <1>  call proc_GetInt
   222                              <1> %endif
   223                                  
   224 00000036 B8[18000000]            	mov EAX,arr1
   225 0000003B E831000000              	call read_matrix	;	pointer to the matrix in EAX
   226 00000040 B8[A8010000]            	mov EAX,arr2
   227 00000045 E827000000              	call read_matrix
   228                                  
   229                                  
   230 0000004A 68[38030000]            	push arr3
   231 0000004F 68[A8010000]            	push arr2
   232 00000054 68[18000000]            	push arr1
   233 00000059 E89A000000              	call matrix_add		;	arr1[index] + arr2[index] = arr3[index]
   234                                  
   235 0000005E B8[38030000]            	mov EAX,arr3
   236 00000063 E818010000              	call display_matrix	;	pointer to the matrix in EAX
   237                                  
   238                                  	done:
   239                                  		.EXIT
   240 00000068 B801000000          <1>  mov EAX,1
   241 0000006D 31DB                <1>  xor EBX,EBX
   242 0000006F CD80                <1>  int 0x80
   243                                  
   244                                  ;********************** Functions ***************************
   245                                  	read_matrix:
   246                                  		PutStr askMatrix
   247 00000071 51                  <1>  push ECX
   248 00000072 B9[3E000000]        <1>  mov ECX,%1
   249 00000077 E8(00000000)        <1>  call proc_PutStr
   250 0000007C 59                  <1>  pop ECX
   251                                  		nwln
   252 0000007D E8(00000000)        <1>  call proc_nwln
   253 00000082 66B90000                		mov CX,0
   254 00000086 66890D[04000000]        		mov [i],CX	;	i -> N
   255 0000008D 66890D[06000000]        		mov [j],CX	; 	j -> M
   256 00000094 B900000000              		mov ECX,0
   257 00000099 890D[08000000]          		mov [offset],ECX
   258                                  		L1:
   259                                  			L2:
   260                                  				GetLInt EDX
   261                              <1> %ifnidni %1,EAX
   262 0000009F 50                  <1>  push EAX
   263 000000A0 E8(00000000)        <1>  call proc_GetLInt
   264 000000A5 89C2                <1>  mov %1,EAX
   265 000000A7 58                  <1>  pop EAX
   266                              <1> %else
   267                              <1>  call proc_GetLInt
   268                              <1> %endif
   269 000000A8 8B0D[08000000]          				mov ECX,[offset]
   270 000000AE 891408                  				mov [EAX+ECX],EDX
   271 000000B1 83C104                  				add ECX,4
   272 000000B4 890D[08000000]          				mov [offset],ECX
   273 000000BA 668B0D[06000000]        				mov CX,[j]
   274 000000C1 6641                    				inc CX
   275 000000C3 66890D[06000000]        				mov [j],CX
   276 000000CA 663B0D[02000000]        				cmp CX,[M]
   277 000000D1 75CC                    				jne L2
   278 000000D3 66B90000                			mov CX,0
   279 000000D7 66890D[06000000]        			mov [j],CX
   280 000000DE 668B1D[04000000]        			mov BX,[i]
   281 000000E5 6643                    			inc BX
   282 000000E7 66891D[04000000]        			mov [i],BX
   283 000000EE 663B1D[00000000]        			cmp BX,[N]
   284 000000F5 75A8                    			jne L1
   285 000000F7 C3                      		ret
   286                                  
   287                                  	matrix_add:
   288 000000F8 66BA0000                		mov DX,0
   289 000000FC 668915[04000000]        		mov [i],DX
   290 00000103 668915[06000000]        		mov [j],DX
   291 0000010A BA00000000              		mov EDX,0
   292 0000010F 8915[08000000]          		mov [offset],EDX
   293                                  		L3:
   294                                  			L4:
   295 00000115 B900000000              				mov ECX,0
   296 0000011A 8B15[08000000]          				mov EDX,[offset]
   297 00000120 8B442404                				mov EAX,[ESP+4]
   298 00000124 8B1C10                  				mov EBX,[EAX+EDX]
   299 00000127 89D9                    				mov ECX,EBX
   300 00000129 8B442408                				mov EAX,[ESP+8]
   301 0000012D 8B1C10                  				mov EBX,[EAX+EDX]
   302 00000130 01D9                    				add ECX,EBX
   303 00000132 8B44240C                				mov EAX,[ESP+12]
   304 00000136 890C10                  				mov [EAX+EDX],ECX
   305 00000139 83C204                  				add EDX,4
   306 0000013C 8915[08000000]          				mov [offset],EDX
   307 00000142 668B15[06000000]        				mov DX,[j]
   308 00000149 6642                    				inc DX
   309 0000014B 668915[06000000]        				mov [j],DX
   310 00000152 663B15[02000000]        				cmp DX,[M]
   311 00000159 75BA                    				jne L4
   312 0000015B 66BA0000                			mov DX,0
   313 0000015F 668915[06000000]        			mov [j],DX
   314 00000166 668B15[04000000]        			mov DX,[i]
   315 0000016D 6642                    			inc DX
   316 0000016F 668915[04000000]        			mov [i],DX
   317 00000176 663B15[00000000]        			cmp DX,[N]
   318 0000017D 7596                    			jne L3
   319 0000017F C3                      		ret
   320                                  
   321                                  	display_matrix:
   322                                  		nwln
   323 00000180 E8(00000000)        <1>  call proc_nwln
   324 00000185 66B90000                		mov CX,0
   325 00000189 66890D[04000000]        		mov [i],CX	;	i -> N
   326 00000190 66890D[06000000]        		mov [j],CX	; 	j -> M
   327 00000197 B900000000              		mov ECX,0
   328 0000019C 890D[08000000]          		mov [offset],ECX
   329                                  		L5:
   330                                  			L6:
   331 000001A2 8B0D[08000000]          				mov ECX,[offset]
   332 000001A8 8B1408                  				mov EDX,[EAX+ECX]
   333                                  
   334                                  				PutLInt EDX
   335 000001AB 50                  <1>  push EAX
   336 000001AC 89D0                <1>  mov EAX,%1
   337 000001AE E8(00000000)        <1>  call proc_PutLInt
   338 000001B3 58                  <1>  pop EAX
   339                                  				PutStr space
   340 000001B4 51                  <1>  push ECX
   341 000001B5 B9[4C000000]        <1>  mov ECX,%1
   342 000001BA E8(00000000)        <1>  call proc_PutStr
   343 000001BF 59                  <1>  pop ECX
   344                                  
   345 000001C0 83C104                  				add ECX,4
   346 000001C3 890D[08000000]          				mov [offset],ECX
   347 000001C9 668B0D[06000000]        				mov CX,[j]
   348 000001D0 6641                    				inc CX
   349 000001D2 66890D[06000000]        				mov [j],CX
   350 000001D9 663B0D[02000000]        				cmp CX,[M]
   351 000001E0 75C0                    				jne L6
   352                                  			nwln
   353 000001E2 E8(00000000)        <1>  call proc_nwln
   354 000001E7 66B90000                			mov CX,0
   355 000001EB 66890D[06000000]        			mov [j],CX
   356 000001F2 668B1D[04000000]        			mov BX,[i]
   357 000001F9 6643                    			inc BX
   358 000001FB 66891D[04000000]        			mov [i],BX
   359 00000202 663B1D[00000000]        			cmp BX,[N]
   360 00000209 7597                    			jne L5
   361 0000020B C3                      		ret
