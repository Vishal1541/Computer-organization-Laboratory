     1                                  ;		AUTHOR	:	VISHAL ANAND
     2                                  ;		ROLL NO	:	B16040
     3                                  ;		CO ASSIGNMENT - 5 Q1
     4                                  ;----------------------------------------
     5                                  
     6                                  %include "io.mac"
     7                              <1> extern   proc_nwln, proc_PutCh, proc_PutStr
     8                              <1> extern   proc_GetStr, proc_GetCh
     9                              <1> extern   proc_PutInt, proc_GetInt
    10                              <1> extern   proc_PutLInt, proc_GetLInt
    11                              <1> 
    12                              <1> ;;-------------------------------------------------------------------
    13                              <1> %macro  .STARTUP  0
    14                              <1> ;group dgroup .data .bss
    15                              <1>         global   _start
    16                              <1> _start:
    17                              <1> %endmacro
    18                              <1> ;;-------------------------------------------------------------------
    19                              <1> 
    20                              <1> 
    21                              <1> ;;-------------------------------------------------------------------
    22                              <1> %macro  .EXIT  0
    23                              <1>         mov    EAX,1
    24                              <1>         xor    EBX,EBX
    25                              <1>         int    0x80
    26                              <1> %endmacro
    27                              <1> ;;-------------------------------------------------------------------
    28                              <1> 
    29                              <1> 
    30                              <1> ;;-------------------------------------------------------------------
    31                              <1> %macro  .DATA 0
    32                              <1>         segment .data
    33                              <1> %endmacro
    34                              <1> ;;-------------------------------------------------------------------
    35                              <1> 
    36                              <1> ;;-------------------------------------------------------------------
    37                              <1> %macro  .UDATA 0
    38                              <1>         segment .bss
    39                              <1> %endmacro
    40                              <1> ;;-------------------------------------------------------------------
    41                              <1> 
    42                              <1> ;;-------------------------------------------------------------------
    43                              <1> %macro  .CODE 0
    44                              <1>         segment .data
    45                              <1>         segment .bss
    46                              <1>         segment .text
    47                              <1> %endmacro
    48                              <1> ;;-------------------------------------------------------------------
    49                              <1> 
    50                              <1> 
    51                              <1> ;;-------------------------------------------------------------------
    52                              <1> %macro  nwln  0 
    53                              <1>         call    proc_nwln
    54                              <1> %endmacro
    55                              <1> ;;-------------------------------------------------------------------
    56                              <1> 
    57                              <1> 
    58                              <1> ;;-------------------------------------------------------------------
    59                              <1> %macro  PutCh  1 
    60                              <1>         push    AX
    61                              <1>         mov     AL,%1
    62                              <1>         call    proc_PutCh
    63                              <1>         pop     AX
    64                              <1> %endmacro
    65                              <1> ;;-------------------------------------------------------------------
    66                              <1> 
    67                              <1> 
    68                              <1> ;;-------------------------------------------------------------------
    69                              <1> %macro  PutStr  1 
    70                              <1>         push    ECX
    71                              <1>         mov     ECX,%1
    72                              <1>         call    proc_PutStr
    73                              <1>         pop     ECX
    74                              <1> %endmacro
    75                              <1> ;;-------------------------------------------------------------------
    76                              <1> 
    77                              <1> 
    78                              <1> ;;-------------------------------------------------------------------
    79                              <1> %macro  GetStr  1-2 81
    80                              <1>         push    ESI
    81                              <1>         push    EDI
    82                              <1>         mov     EDI,%1
    83                              <1>         mov     ESI,%2
    84                              <1>         call    proc_GetStr
    85                              <1>         pop     EDI
    86                              <1>         pop     ESI
    87                              <1> %endmacro
    88                              <1> ;;-------------------------------------------------------------------
    89                              <1> 
    90                              <1> 
    91                              <1> ;;-------------------------------------------------------------------
    92                              <1> %macro  GetCh   1
    93                              <1>         push    SI
    94                              <1>         xor     SI,SI
    95                              <1> %ifidni %1,AL
    96                              <1>         ;inc     SI
    97                              <1>         call    proc_GetCh
    98                              <1> %elifidni %1,AH
    99                              <1>         mov     SI,1
   100                              <1>         call    proc_GetCh
   101                              <1> %else
   102                              <1>         push    AX
   103                              <1>         call    proc_GetCh
   104                              <1>         mov     %1,AL
   105                              <1>         pop     AX
   106                              <1> %endif
   107                              <1>         pop     SI
   108                              <1> %endmacro
   109                              <1> ;;-------------------------------------------------------------------
   110                              <1> 
   111                              <1> 
   112                              <1> ;;-------------------------------------------------------------------
   113                              <1> %macro  PutInt  1
   114                              <1>         push    AX
   115                              <1>         mov     AX,%1
   116                              <1>         call    proc_PutInt
   117                              <1>         pop     AX
   118                              <1> %endmacro
   119                              <1> ;;-------------------------------------------------------------------
   120                              <1> 
   121                              <1> 
   122                              <1> ;;-------------------------------------------------------------------
   123                              <1> %macro  GetInt  1
   124                              <1> %ifnidni %1,AX
   125                              <1>         push    AX
   126                              <1>         call    proc_GetInt
   127                              <1>         mov     %1,AX
   128                              <1> 	  pop     AX
   129                              <1> %else 
   130                              <1>         call  proc_GetInt
   131                              <1> %endif
   132                              <1> %endmacro
   133                              <1> ;;-------------------------------------------------------------------
   134                              <1> 
   135                              <1> ;;-------------------------------------------------------------------
   136                              <1> %macro  PutLInt  1
   137                              <1>         push    EAX
   138                              <1>         mov     EAX,%1
   139                              <1>         call    proc_PutLInt
   140                              <1>         pop     EAX
   141                              <1> %endmacro
   142                              <1> ;;-------------------------------------------------------------------
   143                              <1> 
   144                              <1> ;;-------------------------------------------------------------------
   145                              <1> %macro  GetLInt  1
   146                              <1> %ifnidni %1,EAX
   147                              <1>         push    EAX
   148                              <1>         call    proc_GetLInt
   149                              <1>         mov     %1,EAX
   150                              <1> 	  pop     EAX
   151                              <1> %else 
   152                              <1>         call  proc_GetLInt
   153                              <1> %endif
   154                              <1> %endmacro
   155                              <1> ;;-------------------------------------------------------------------
   156                              <1> 
   157                                  
   158                                  .DATA
   159                              <1>  segment .data
   160 00000000 456E74657220746865-     	msg_ask	db "Enter the string: ",0
   161 00000009 20737472696E673A20-
   162 00000012 00                 
   163 00000013 46696E616C20737472-     	msg_ans	db "Final string is: ",0
   164 0000001C 696E672069733A2000 
   165 00000025 456E74657220616E6F-     	msg_y_n db "Enter another string? (Y/y to continue)",0
   166 0000002E 746865722073747269-
   167 00000037 6E673F2028592F7920-
   168 00000040 746F20636F6E74696E-
   169 00000049 75652900           
   170 0000004D 343639353033313837-     	convert db "4695031872"
   171 00000056 32                 
   172                                  
   173                                  .UDATA
   174                              <1>  segment .bss
   175 00000000 <res 00000064>          	inp_str resb 100
   176 00000064 <res 00000001>          	inp_y_n resb 1
   177                                  
   178                                  .CODE
   179                              <1>  segment .data
   180                              <1>  segment .bss
   181                              <1>  segment .text
   182                                  	.STARTUP
   183                              <1> 
   184                              <1>  global _start
   185                              <1> _start:
   186                                  	L1:
   187                                  		PutStr msg_ask
   188 00000000 51                  <1>  push ECX
   189 00000001 B9[00000000]        <1>  mov ECX,%1
   190 00000006 E8(00000000)        <1>  call proc_PutStr
   191 0000000B 59                  <1>  pop ECX
   192                                  		GetStr inp_str
   193 0000000C 56                  <1>  push ESI
   194 0000000D 57                  <1>  push EDI
   195 0000000E BF[00000000]        <1>  mov EDI,%1
   196 00000013 BE51000000          <1>  mov ESI,%2
   197 00000018 E8(00000000)        <1>  call proc_GetStr
   198 0000001D 5F                  <1>  pop EDI
   199 0000001E 5E                  <1>  pop ESI
   200 0000001F B8[00000000]            		mov EAX,inp_str
   201                                  		L2:
   202 00000024 8A18                    			mov BL,byte[EAX]
   203 00000026 B130                    			mov CL,'0'
   204 00000028 BA00000000              			mov EDX,0
   205                                  			L3:	
   206 0000002D 38D9                    				cmp CL,BL
   207 0000002F 740A                    				je true
   208 00000031 80F939                  				cmp CL,'9'
   209 00000034 740F                    				je inpInc
   210 00000036 42                      				inc EDX
   211 00000037 FEC1                    				inc CL
   212 00000039 EBF2                    				jmp L3
   213                                  				true:
   214 0000003B 8A9A[4D000000]          					mov BL,byte[convert+EDX]
   215 00000041 8818                    					mov byte[EAX],BL
   216 00000043 EB00                    					jmp inpInc
   217                                  			inpInc:
   218 00000045 40                      				inc EAX
   219 00000046 3C00                    				cmp AL,0
   220 00000048 75DA                    				jne L2
   221                                  		PutStr msg_ans
   222 0000004A 51                  <1>  push ECX
   223 0000004B B9[13000000]        <1>  mov ECX,%1
   224 00000050 E8(00000000)        <1>  call proc_PutStr
   225 00000055 59                  <1>  pop ECX
   226                                  		PutStr inp_str
   227 00000056 51                  <1>  push ECX
   228 00000057 B9[00000000]        <1>  mov ECX,%1
   229 0000005C E8(00000000)        <1>  call proc_PutStr
   230 00000061 59                  <1>  pop ECX
   231                                  		nwln
   232 00000062 E8(00000000)        <1>  call proc_nwln
   233                                  		PutStr msg_y_n
   234 00000067 51                  <1>  push ECX
   235 00000068 B9[25000000]        <1>  mov ECX,%1
   236 0000006D E8(00000000)        <1>  call proc_PutStr
   237 00000072 59                  <1>  pop ECX
   238                                  		GetStr inp_y_n
   239 00000073 56                  <1>  push ESI
   240 00000074 57                  <1>  push EDI
   241 00000075 BF[64000000]        <1>  mov EDI,%1
   242 0000007A BE51000000          <1>  mov ESI,%2
   243 0000007F E8(00000000)        <1>  call proc_GetStr
   244 00000084 5F                  <1>  pop EDI
   245 00000085 5E                  <1>  pop ESI
   246 00000086 803D[64000000]59        		cmp byte[inp_y_n],'Y'
   247 0000008D 0F846DFFFFFF            		je L1
   248 00000093 803D[64000000]79        		cmp byte[inp_y_n],'y'
   249 0000009A 0F8460FFFFFF            		je L1
   250                                  done:
   251                                  	.EXIT
   252 000000A0 B801000000          <1>  mov EAX,1
   253 000000A5 31DB                <1>  xor EBX,EBX
   254 000000A7 CD80                <1>  int 0x80
